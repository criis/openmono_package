#!/bin/bash


VERSION="1.0"
APPNAME="monomake"
MONO_PATH=$(dirname $(dirname `which $APPNAME`))
if [ -d $MONO_PATH/openmono ]; then
	MONO_PATH=$MONO_PATH/openmono
fi
source $MONO_PATH/configuration.sh

PROJECT_FILES="$TEMPLATE_DIR/app_controller.h $TEMPLATE_DIR/app_controller.cpp"

function usage {
    echo "OpenMono project utility, creating new projects and access to monoprog"
    echo ""
    echo "Usage:"
    echo "${APPNAME} COMMAND [options]"
    echo ""
    echo "Commands:"
    echo "  project [name]  Create a new project folder. Default name is: new_mono_project"
    echo "  bootldr         See if a mono is connected and in bootloader"
    echo "  monoprog [...]  Shortcut to access the MonoProg USB programmer"
    echo "  version         Display the current version of $APPNAME"
    echo "  path            Display the path to the Mono Environment installation dir"
    echo ""
}

function printMonoPath {
    echo "Mono Environment Path: $MONO_PATH"
}

function writeMakefile {
    DATE=`date`
    echo "# Makefile created by $APPNAME, $DATE" > $2
    echo "# Project: $1" >> $2
    echo "MONO_PATH=$MONO_PATH" >> $2
    echo "TARGET=$1" >> $2
    echo "" >> $2
	echo "include \$(MONO_PATH)/mono.mk" >> $2
}

function projectCommand {
    if [ $# -gt 1 ]; then
        echo "Creating new mono project: $2..."
        createProjectFolder $2
    elif [ $# -eq 1 ]; then
        echo "Creating new mono project: new_mono_project..."
        createProjectFolder "new_mono_project"
    fi
}

function createProjectFolder {
    if [ -e $1 ]; then
        echo "Err: Project directory already exists!"
        return 1
    else
        mkdir -p $1
        for file in ${PROJECT_FILES}; do
        cp $MONO_PATH/$file $1/.
        done
        writeMakefile $1 $1/Makefile
    fi
}

function probeBootloader {
    $MONOPROG_DIR/monoprog -d
}

function monoprog {
    $MONOPROG_DIR/monoprog $1 $2 $3 $4
}

function printVersion {
    echo "${APPNAME} version ${VERSION}"
}

if [ $# -lt 1 ]; then
    echo "ERR: No command argument given! You must provide a command"
    usage
elif [ $1 == "project" ]; then
    projectCommand $1 $2
elif [ $1 == "bootldr" ]; then
    probeBootloader
elif [ $1 == "monoprog" ]; then
    monoprog $2 $3 $4 $5
elif [ $1 == "version" ]; then
    printVersion
elif [ $1 == "path" ]; then
    printMonoPath
else
    echo "ERR: Unknown command $1"
    usage
fi
